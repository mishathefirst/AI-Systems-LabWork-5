# -*- coding: utf-8 -*-
"""Task5 Selected size.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x7qAZ-9VO9UDYl2Wp_ke2brnQe3lJDX0
"""

!pip install --upgrade pip
!pip install --upgrade scikit-learn==0.23.0

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
# %matplotlib inline

"""MNIST - датасет образцов рукописного написания цифр, является стандартом, предложенным Национальным институтом стандартов и технологий США с целью калибрации и сопоставления методов распознавания изображений с помощью машинного обучения. Образцы из набора NIST были нормализированы, прошли сглаживание и приведены к серому полутоновому изображению размером 28x28 пикселей. """

from keras.datasets import mnist
(X_train, y_train), (X_pred, y_pred) = mnist.load_data()

"""Первый элемент"""

plt.title("Нулевой объект из тренировочного набора:")
plt.imshow(X_train[0], cmap="gray")

"""И его отклик"""

y_train[0]

"""Для разделения данных используем функцию train_test_split из библиотеки sklearn. Следующий код разделяет исходные данные в отношении 70/30."""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.3, random_state=2020)

"""Преобразуем данные"""

dim = 784 # 28*28 
X_train = X_train.reshape(len(X_train), dim)
X_test = X_test.reshape(len(X_test), dim)

"""Уменьшим размерность тестовых данных"""

from sklearn.decomposition import PCA

pca = PCA(n_components=50, svd_solver='full')
modelPCA = pca.fit(X_train) 

X_train = modelPCA.transform(X_train)

"""Найдем долю объясненной дисперсии в зависимости от количества используемых ГК"""

explained_variance = np.round(np.cumsum(pca.explained_variance_ratio_),3)
explained_variance

plt.plot(np.arange(10), explained_variance, ls = '-')

"""Подключаем библиотеку для обучения многоклассового классификатора методом One-vs-All и дерево принятия решений"""

from sklearn.multiclass import OneVsRestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

tree = RandomForestClassifier(criterion='gini', min_samples_leaf=10, max_depth=20, n_estimators=10, random_state=2020)
clf = OneVsRestClassifier(tree).fit(X_train, y_train)

"""Примените полученное ранее преобразование метода главных компонент к тестовым данным"""

len(X_test[0])

modelPCA = pca.fit(X_test) 
X_test = modelPCA.transform(X_test)

y_pred = clf.predict(X_test)

from sklearn.metrics import confusion_matrix
CM = confusion_matrix(y_test, y_pred)

CM

"""Число верно классифицирвоанных объектов класс 0"""

CM[0][0]

"""Число объектов класс 0 отнесенных к классу 8"""

CM[0][8]